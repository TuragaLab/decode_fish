# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/18_predict_funcs.ipynb (unless otherwise specified).

__all__ = ['predict']

# Cell
from ..imports import *
from .file_io import *
from .emitter_io import *
from .utils import *
from monai.inferers import sliding_window_inference

# Cell
def predict(model, post_proc, image_paths, window_size=[None,256,256], device='cuda'):

    pred_df = DF()
    with torch.no_grad():
        for p in tqdm(image_paths):
            print(p.split('/')[-1])
            img = load_tiff_image(p)
            z,y,x = img.shape[-3:]
            img = img.reshape(-1,z,y,x)
            for i in range(len(img)):
                print(img[i][None,None].shape)
                output = sliding_window_inference(img[i][None,None], window_size, 1, model.to(device), overlap=0.2, sw_device=device, device='cpu', mode='gaussian')
                # output = model.cpu()(img[i][None,None])
                output = model.tensor_to_dict(output)
                p_si = sliding_window_inference(output['logits'], window_size, 1, post_proc, overlap=0.2, sw_device=device, device='cpu', mode='gaussian')
                i_df = post_proc.get_df(output, p_si)
                print('N. emitters: ', len(i_df))
                pred_df = append_emitter_df(pred_df, i_df)
                free_mem()

        return pred_df