# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/17_eval_routines.ipynb (unless otherwise specified).

__all__ = ['base_path', 'get_df_from_hdf5', 'add_df_to_hdf5', 'sim_data', 'get_sim_perf', 'get_reconstruction_from_df',
           'filt_perc']

# Cell
from ..imports import *
from .file_io import *
from .emitter_io import *
from .utils import *
from .dataset import *
from .output_trafo import *
from .evaluation import *
from .plotting import *
from .visualization import *
from torch.utils.data import DataLoader
from ..engine.microscope import Microscope
from ..engine.point_process import PointProcessUniform
import h5py

base_path =  '/groups/turaga/home/speisera/Mackebox/Artur/WorkDB/deepstorm/'

# Cell
def get_df_from_hdf5(group):

    df = DF()
    for k in group.keys():
        df[k] = group[k][()]
    return df

def add_df_to_hdf5(parent, name, df):

    g = parent.create_group(name)
    for k in df.keys():
        g.create_dataset(k, data=df[k].values)

# Cell
def sim_data(decode_dl, batches, micro, model):

    gt_dfs = []
    xsim_col = []

    for _ in range(batches):
        with torch.no_grad():
            x, local_rate, background = next(iter(decode_dl))
            sim_vars = PointProcessUniform(local_rate,model.int_dist.int_conc, model.int_dist.int_rate, model.int_dist.int_loc).sample()
            xsim = micro(*sim_vars)
            x = micro.noise(xsim, background).sample()

            xsim_col.append(x)
            gt_vars = sim_vars[:-1]
            gt_dfs.append(sample_to_df(*gt_vars, px_size_zyx=[1.,1.,1.]))

    return torch.cat(xsim_col), cat_emitter_dfs(gt_dfs, decode_dl.batch_size)

def get_sim_perf(x, gt_df, model, post_proc, micro, cuda=True, print_res=True):

    pred_dfs = []
    x_recs = []

    for i in range(len(x)):
        with torch.no_grad():
            pred_df, rec, res_dict = get_prediction(model, post_proc, x[i:i+1], micro=micro, cuda=True, return_rec=True, min_int=-100)
            pred_dfs.append(pred_df)
            x_recs.append(rec)

    pred_df = cat_emitter_dfs(pred_dfs)
    xrec = torch.cat(x_recs)
    perf, matches, _ = matching(gt_df, pred_df, tolerance=500, print_res=print_res)
    perf['mae'] = abs(xrec-rec).mean().item()
    perf['rmse'] = torch.sqrt(((xrec-rec)**2).mean()).item()

    return perf, pred_df, matches

def get_reconstruction_from_df(df, micro, output_shape, px_size_zyx=[100,100,100]):

    output_shape = torch.Size([1]*(5-len(output_shape))+list(output_shape))
    locs, x, y, z, ints = df_to_micro(df, px_size_zyx)
    rec_img = micro(locs, x, y, z, ints, output_shape)
    return rec_img


# Cell
def filt_perc(df, perc = 90, return_low=True, metric='comb_sig'):
    if perc >= 100:
        return df
    ret_df = DF()
    for f in dec_df_col['frame_idx'].unique():
        frame_df = df[df['frame_idx']==f]
        filt_val = np.percentile(frame_df[metric], perc)
        print(filt_val)
        if return_low:
            frame_df = frame_df[frame_df[metric] < filt_val]
        else:
            frame_df = frame_df[frame_df[metric] > filt_val]
        ret_df = ret_df.append(frame_df)
    return ret_df