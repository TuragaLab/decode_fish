# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_psf.ipynb (unless otherwise specified).

__all__ = ['LinearInterpolatedPSF', 'crop_psf']

# Cell
from ..imports import *
import torch.nn as nn
from torch.jit import script
from typing import Union, List
import torch.nn.functional as F
from ..funcs.utils import *
from ..funcs.plotting import *

# Cell
class LinearInterpolatedPSF(nn.Module):
    """
    Linearly interpolates psf volume with offsets
    """

    def __init__(self, size_zyx ,upsample_factor=3, device='cuda'):
        super().__init__()

        self.upsampled_psf_size = list((upsample_factor*(np.array(size_zyx)-1)+1).astype('int'))
        # +- /sz so that the values correspond to the pixel centers
        v = [torch.linspace(-1+1/sz, 1-1/sz, int(sz)) for sz in self.upsampled_psf_size]

        self.register_buffer('x', v[2])
        self.register_buffer('y', v[1])
        self.register_buffer('z', v[0])
        self.device=device
        self.psf_volume = nn.Parameter(0.01*torch.rand(1, *self.upsampled_psf_size))

    def forward(self, x_offset_val, y_offset_val, z_offset_val):

        N_em = x_offset_val.shape[0]
        # Scale offsets by size. Factor of two because range [-1,1]
        x_offset = 2 * x_offset_val.view(-1) / self.upsampled_psf_size[2]
        y_offset = 2 * y_offset_val.view(-1) / self.upsampled_psf_size[1]
        z_offset = 2 * z_offset_val.view(-1) / self.upsampled_psf_size[0]
        i_img, x_grid, y_grid, z_grid = torch.meshgrid(torch.arange(N_em, dtype=torch.float32).to(self.device), self.x.to(self.device), self.y.to(self.device), self.z.to(self.device))

        x_grid = x_grid - x_offset[:, None, None, None]
        y_grid = y_grid - y_offset[:, None, None, None]
        z_grid = z_grid - z_offset[:, None, None, None]

        m_grid = torch.stack([x_grid, y_grid, z_grid], -1)
        psf_out = torch.nn.functional.grid_sample(self.psf_volume.expand(N_em, -1, -1, -1, -1).to(self.device), m_grid, align_corners = False)

        return psf_out.transpose(-3,-1)

# Cell
def crop_psf(psf, extent_zyx):

    cropped_vol = center_crop(psf.psf_volume, extent_zyx)
    cropped_psf = LinearInterpolatedPSF(extent_zyx, upsample_factor= 1)
    cropped_psf.psf_volume.data = cropped_vol

    return cropped_psf