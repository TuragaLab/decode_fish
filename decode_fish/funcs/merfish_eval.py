# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/19_MERFISH_routines.ipynb (unless otherwise specified).

__all__ = ['plot_gene_numbers', 'plot_gene_panels', 'make_roc']

# Cell
from ..imports import *
from .emitter_io import *
from .utils import *
from .plotting import *
import shutil

from numba import njit
from scipy.spatial import cKDTree
from .evaluation import matching

import io, requests
from sklearn.neighbors import NearestNeighbors
# from starfish import data
# import torch.tensor as T

import pprint

# Cell
def plot_gene_numbers(bench_counts, res_counts, title='', log=True, corr=True):

    if corr:
        r = np.corrcoef(bench_counts, res_counts)[0, 1]
        r = np.round(r, decimals=3)
    else:
        r = [int(np.sum(bench_counts)), int(np.sum(res_counts))]
    x_lim = np.max([bench_counts.max(), res_counts.max()])
    x = np.linspace(0, x_lim)

    plt.scatter(bench_counts, res_counts, 50, zorder=2)
    plt.plot(x, x, '-k', zorder=1)

    plt.xlabel('Gene copy number Benchmark')
    plt.ylabel('Gene copy number DECODE')
    if log:
        plt.xscale('log')
        plt.yscale('log')
    plt.title(f'{title} r = {r}');

# Cell
def plot_gene_panels(res_df, bench_df, targets, matches=None):

    bench_counts = DF(data=None, index=targets)
    bench_counts['Res_all'] = res_df.groupby('gene')['gene'].count()
    bench_counts['Bench_all'] = bench_df.groupby('gene')['gene'].count()
    bench_counts = bench_counts.fillna(0)

    if matches is not None:
        fps = res_df.loc[~res_df['loc_idx'].isin(matches['loc_idx_pred'])]
        fns = bench_df.loc[~bench_df['loc_idx'].isin(matches['loc_idx_tar'])]

        bench_counts['Res_fp'] = fps.groupby('gene')['gene'].count()
        bench_counts['Res_fns'] = fns.groupby('gene')['gene'].count()

    bench_counts=bench_counts.fillna(0)

    print(len(bench_df), len(res_df))

    plt.figure(figsize=(15,5))
    plt.subplot(131)
    plot_gene_numbers(bench_counts['Bench_all'].values, bench_counts['Res_all'].values, 'All', log=False)

    binds = []
    for i,g in enumerate(targets):
        if 'Blank' in g:
            binds.append(g)

    plt.subplot(132)
    plot_gene_numbers(bench_counts.loc[binds, 'Bench_all'].values, bench_counts.loc[binds,'Res_all'].values, 'Blanks', log=False, corr=False)

    if 'Res_fp' in bench_counts:
        plt.subplot(133)
        plot_gene_numbers(bench_counts['Bench_all'].values, bench_counts['Res_fp'].values, 'False Pos.', log=False)

# Cell
def make_roc(df, var='code_err', ascending=True, n_max=30000):

    if n_max is None:
        n_max = len(df)
    x = np.arange(0,n_max,100)
    df = df.sort_values(var, ascending=ascending)
    n_blanks = []
    c_blanks = 0
    for i in range(1, len(x)):
        c_blanks += (df[x[i-1]:x[i]]['gene'].str.contains('Blank')).sum()
        n_blanks.append((c_blanks).sum())

    return x[1:], n_blanks