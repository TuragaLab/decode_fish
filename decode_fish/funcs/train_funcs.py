# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/13_train.ipynb (unless otherwise specified).

__all__ = ['eval_logger', 'load_from_eval_dict', 'save_train_state', 'train']

# Cell
from ..imports import *
from .evaluation import *
from .file_io import *
from .emitter_io import *
from .utils import *
from .dataset import *
from .output_trafo import *
from .plotting import *
import torch.nn.functional as F
from torch import distributions as D
from torch.optim import AdamW
from torch.optim.lr_scheduler import MultiStepLR
from torch.utils.data import DataLoader
from ..engine.microscope import Microscope
from ..engine.model import UnetDecodeNoBn
import shutil
from ..engine.point_process import PointProcessUniform
from ..engine.gmm_loss import PointProcessGaussian
import wandb
# from decode_fish.funcs.visualization vimport get_simulation_statistics

# Cell
def eval_logger(pred_df, target_df, iteration, data_str='Sim. '):

    perf_dict,_,shift = matching(target_df, pred_df, print_res=False)
    if 'Inp' in data_str:
        pred_corr = shift_df(pred_df, shift)
        perf_dict, _, _ = matching(target_df, pred_corr, print_res=False)

    wandb.log({data_str +'Metrics/eff_3d': perf_dict['eff_3d']}, step=iteration)
    wandb.log({data_str +'Metrics/jaccard': perf_dict['jaccard']}, step=iteration)
    wandb.log({data_str +'Metrics/rmse_vol': perf_dict['rmse_vol']}, step=iteration)

    wandb.log({data_str +'Metrics/precision': perf_dict['precision']}, step=iteration)
    wandb.log({data_str +'Metrics/recall': perf_dict['recall']}, step=iteration)
    wandb.log({data_str +'Metrics/rmse_x': perf_dict['rmse_x']}, step=iteration)
    wandb.log({data_str +'Metrics/rmse_y': perf_dict['rmse_y']}, step=iteration)
    wandb.log({data_str +'Metrics/rmse_z': perf_dict['rmse_z']}, step=iteration)

def load_from_eval_dict(eval_dict):

    eval_img = load_tiff_image(sorted(glob.glob(eval_dict['image_path']))[eval_dict['img_ind']])
    eval_img = eval_img[eval_dict['crop_sl']]
    eval_df = None
    eval_psf = None
    if eval_dict['txt_path'] is not None:
        txt_path = sorted(glob.glob(eval_dict['txt_path']))[eval_dict['img_ind']]
        eval_df = simfish_to_df(txt_path)
        eval_df = crop_df(eval_df, eval_dict['crop_sl'], px_size_zyx=eval_dict['px_size_zyx'])

    if eval_dict['psf_path'] is not None:
        eval_psf = load_tiff_image(eval_dict['psf_path'])

    return eval_img, eval_df, eval_psf

def save_train_state(save_dir, model, microscope, optim_net, psf, optim_psf):

        torch.save({'state_dict':model.state_dict(), 'scaling':[model.unet.inp_scale, model.unet.inp_offset]}, save_dir/'model.pkl')
        torch.save(microscope.state_dict(), save_dir/'microscope.pkl')
        torch.save(optim_net.state_dict(), save_dir/'opt_net.pkl')
        torch.save(psf.state_dict(), save_dir/'psf.pkl' )
        torch.save(optim_psf.state_dict(), save_dir/'opt_psf.pkl')

# Cell
def train(cfg,
          model,
          dl,
          optim_net,
          optim_psf,
          optim_mic,
          sched_net,
          sched_psf,
          sched_mic,
          microscope,
          psf,
          post_proc,
          eval_dict=None):

    """
    Training loop for autoencoder learning. Alternates between a simulator training step to train the inference network
    and an autoencoder step to train the PSF (and microscope) parameters.

    Args:
        model (torch.nn.Module): DECODE 3D UNet.
        num_iter (int): Number of training iterations for pure sl learning(batches).
        num_iter (int): Total number of training iterations (batches).
        dl  (torch.utils.data.dataloader.DataLoader): Dataloader that returns a random sub volume from the real volume, an estiamted emitter density and background.
        optim_net  (torch.optim.Optimizer): Optimizer for the network parameters.
        optim_psf  (torch.optim.Optimizer): Optimizer for the PSF parameters.
        sched_net  (torch.optim.lr_scheduler): LR scheduler for the network parameters.
        sched_psf  (torch.optim.lr_scheduler): LR scheduler for the PSF parameters.
        min_int  (float): Minimal fraction of the max intensity used when sampling emitters.
        microscope (torch.nn.Module): Microscope class that transforms emitter locations into simulated images.
        log_interval  (int): Number of iterations between performance evaluations.
        save_dir  (str, PosixPath): Output path where the trained model is stored.
        log_dir  (str, PosixPath, optional): Output path where log files for Tensorboard are stored.
        psf (torch.nn.Module): Parametric PSF.
        bl_loss_scale  (float): The background loss gets scaled by this factor when added to the GMM loss.
        grad_clip  (float): Gradient clipping threshold.
        eval_dict  (dict, optional): Dictionary with evaluation parameters

    """

    save_dir = Path(cfg.output.save_dir)

    if eval_dict is not None:
        eval_img, eval_df, eval_psf = load_from_eval_dict(eval_dict)

    model.cuda().train()
    torch.save(psf.state_dict(), str(save_dir) + '/psf_init.pkl' )

    for batch_idx in range(cfg.training.num_iters):

        x, local_rate, background = next(iter(dl))

        optim_net.zero_grad()

        sim_vars = PointProcessUniform(local_rate, int_conc=model.int_dist.int_conc.detach(), int_rate=model.int_dist.int_rate.detach(), int_loc=model.int_dist.int_loc.detach(), sim_iters=5).sample()
        # sim_vars = locs_sl, x_os_sl, y_os_sl, z_os_sl, ints_sl, output_shape
        xsim = microscope(*sim_vars)
        xsim_noise = microscope.noise(xsim, background).sample()

        out_sim = model.tensor_to_dict(model(xsim_noise))

        count_prob, spatial_prob = PointProcessGaussian(**out_sim).log_prob(*sim_vars[:5])
        gmm_loss = -(spatial_prob + cfg.training.net.cnt_loss_scale*count_prob).mean()

        background_loss = F.mse_loss(out_sim['background'], background) * cfg.training.net.bl_loss_scale

        loss = gmm_loss + background_loss

        # Update network parameters
        loss.backward()

        if cfg.training.net.grad_clip: torch.nn.utils.clip_grad_norm_(model.unet.parameters(), max_norm=cfg.training.net.grad_clip, norm_type=2)

        optim_net.step()
        if sched_net:
            sched_net.step()

        if batch_idx > cfg.training.start_micro:

            out_inp = model.tensor_to_dict(model(x))
            proc_out_inp = post_proc.get_micro_inp(out_inp) # locations, x_os_3d, y_os_3d, z_os_3d, ints_3d, output_shape, comb_sig

            if batch_idx > cfg.training.start_psf:

                optim_psf.zero_grad()

                # Get autoencoder loss
                ae_img = microscope(*proc_out_inp[:6])
                log_p_x_given_z = -microscope.noise(ae_img,out_inp['background']).log_prob(x).mean()
                if cfg.training.psf.norm_reg:
#                     log_p_x_given_z += cfg.training.psf.norm_reg * (psf.sum_loss() + psf.com_loss() + psf.clip_loss())
                    log_p_x_given_z += cfg.training.psf.norm_reg * (psf.com_loss())

                log_p_x_given_z.backward()
                if cfg.training.psf.grad_clip:
                    torch.nn.utils.clip_grad_norm_(optim_psf.param_groups[0]['params'], max_norm=cfg.training.psf.grad_clip, norm_type=2)

                optim_psf.step()
                if sched_psf:
                    sched_psf.step()

            if len(proc_out_inp[4]):

                optim_mic.zero_grad()
                ints = proc_out_inp[4]

                gamma_int = D.Gamma(model.int_dist.int_conc, model.int_dist.int_rate)
                loc_trafo = [D.AffineTransform(loc=model.int_dist.int_loc, scale=1, event_dim=1)]
                int_loss = -D.TransformedDistribution(gamma_int, loc_trafo).log_prob(ints.detach()).mean()

                int_loss.backward()
                optim_mic.step()

                if sched_mic:
                    sched_mic.step()

        # Logging
        if batch_idx % 10 == 0:
            wandb.log({'SL Losses/gmm_loss': gmm_loss.detach().cpu()}, step=batch_idx)
            wandb.log({'SL Losses/count_loss': (-count_prob.mean()).detach().cpu()}, step=batch_idx)
            wandb.log({'SL Losses/bg_loss': background_loss.detach().cpu()}, step=batch_idx)
            wandb.log({'AE Losses/int_mu': model.int_dist.int_conc.item()/model.int_dist.int_rate.item() + model.int_dist.int_loc.item()}, step=batch_idx)
            wandb.log({'AE Losses/int_rate': model.int_dist.int_rate.item()}, step=batch_idx)
            wandb.log({'AE Losses/int_loc': model.int_dist.int_loc.item()}, step=batch_idx)
            wandb.log({'AE Losses/theta': microscope.noise.theta.item()}, step=batch_idx)

            if batch_idx > cfg.training.start_psf:
                wandb.log({'AE Losses/p_x_given_z': log_p_x_given_z.detach().cpu()}, step=batch_idx)
                wandb.log({'AE Losses/RMSE(rec)': torch.sqrt(((x-(ae_img+out_inp['background']))**2).mean()).detach().cpu()}, step=batch_idx)
                wandb.log({'AE Losses/sum(psf)': F.relu(psf.psf_volume/psf.psf_volume.max())[0].sum().detach().cpu()}, step=batch_idx)
#                     wandb.log({'AE Losses/theta': microscope.theta.item()}, step=batch_idx)

        if batch_idx % cfg.output.log_interval == 0:
            print(batch_idx)
            with torch.no_grad():
                pred_df = post_proc.get_df(out_sim)
                px_size = cfg.evaluation.px_size_zyx
                target_df = sample_to_df(*sim_vars[:5], px_size_zyx=px_size)
                eval_logger(pred_df, target_df, batch_idx, data_str='Sim. ')
                wandb.log({'Sim. Metrics/prob_fac': torch.sigmoid(out_sim['logits']).sum().item()/len(target_df)}, step=batch_idx)
                wandb.log({'Sim. Metrics/n_em_fac': len(pred_df)/len(target_df)}, step=batch_idx)
#                 wandb.log({'Prob hist': wandb.Image(plot_prob_hist(out_sim))}, step=batch_idx)

                if cfg.output.log_figs:
                    sl_fig = sl_plot(x, xsim_noise, nm_to_px(pred_df, px_size), nm_to_px(target_df, px_size), background, out_sim)
                    plt.show()
                    wandb.log({'SL summary': sl_fig}, step=batch_idx)

                if eval_dict is not None:
                    res_eval = model.tensor_to_dict(model(eval_img[None].cuda()))
                    ae_img = microscope(*post_proc.get_micro_inp(res_eval)[:6])
                    pred_eval_df = post_proc.get_df(res_eval)
                    wandb.log({'AE Losses/N preds(eval)': len(pred_eval_df)}, step=batch_idx)

                    if eval_df is not None:
                        eval_logger(pred_eval_df, eval_df, batch_idx, data_str='Inp. ')

                    if eval_psf is not None:
#                         wandb.log({'AE Losses/Corr(psf)': cpu(torch.sqrt(torch.mean(((eval_psf-psf.psf_volume.detach().cpu()))**2)))}, step=batch_idx)
                        wandb.log({'AE Losses/Corr(psf)': np.corrcoef(cpu(eval_psf).reshape(-1), cpu(psf.psf_volume).reshape(-1))[0,1]}, step=batch_idx)
                        wandb.log({'AE Losses/RMSE(psf)': np.sqrt(np.mean((cpu(eval_psf/eval_psf.max())-cpu(psf.psf_volume/psf.psf_volume.max()))**2))}, step=batch_idx)

                    if cfg.output.log_figs:
                        eval_fig = gt_plot(eval_img, nm_to_px(pred_eval_df, px_size), nm_to_px(eval_df, px_size), px_size,ae_img[0]+res_eval['background'][0], psf)
                        plt.show()
                        wandb.log({'GT': eval_fig}, step=batch_idx)

            # storing
            if batch_idx > 0 and abs(cfg.training.start_psf - batch_idx)<cfg.output.log_interval:
                Path.mkdir(save_dir/'sl_save', exist_ok=True)
                save_train_state(save_dir/'sl_save', model, microscope, optim_net, psf, optim_psf)

            save_train_state(save_dir, model, microscope, optim_net, psf, optim_psf)

    wandb.finish()